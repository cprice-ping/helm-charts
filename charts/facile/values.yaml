# helm upgrade --install {{release-name}} -f ./values.yaml

# Default values for Project Facile chart.
global:
  # Your specific environment variables - values are injected into Server Profiles
  envs:
    # Ping Global Values
    # Named used in labels in PingOne and Ping Software
    ENVIRONMENT_NAME: "Facile"
    # Default Administrative Password - also passed to APIs as {{globalPwd}}
    PING_IDENTITY_PASSWORD: "2FederateM0re"
    ## BaseDN of the datastore
    USER_BASE_DN: dc=facile.com
    decoderHost: decoder.pingidentity.cloud

  # If you'd like to separate the stack from other deployments in your namespace
  # prepend | append | none  
  addReleaseNameToResource: prepend

  # Product Image version tag
  # image:
  #   tag: 2212

  api:
    # Set to "DEBUG" if you want to see the output of the API calls being made by pingconfig
    # kubectl logs -f job/{{release name}}-pingconfig
    logLevel: "INFO"

  # Determines if the DevOps Ingress config is applied
  # Set to `false` to use a single Client-facing ingress to pul all front-channel services on one hostname
  ingress:
    enabled: true
    addReleaseNameToHost: append
    defaultDomain: ping-devops.com
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      kubernetes.io/ingress.class: "nginx-public"

#### End Global ####

# PingOne Service Details
pingOne:
  # Set to `true` if you are supplying your PingOne details 
  # Facile leverages PingOne MFA by default
  usePingOneServices: true
  # This configures the proper endpoints for My Ping and PingOne Service IKs
  # PingOne Regions - "NA" | "EU" | "AP"
  envRegion: "NA"
  administration:
    useMyPing: true
    envId: "YourAdminEnvId"
    adminUserId: "YourAdminUserId"
    workerApp:
      id: "YourMgmtWorkerId"
      secret: "YourMgmtWorkerSecret"
    pfLogonApp:
      id: "YourPFAdminAppId"
      secret: "YourPFAdminAppSecret"
    psLogonApp:
      id: "YourPAAdminAppId"
      secret: "YourPAAdminAppSecret"
    pdLogonApp:
      id: "YourPDAdminAppId"
      secret: "YourPDAdminAppSecret"
  services:
    enabled: true
### End - PingOne

capabilities:
  accessManager:
    enabled: false
  authenticationAuthority:
    enabled: true
  authorize:
    enabled: false
  multiFactorAuthentication:
    enabled: false
  risk:
    enabled: false
  verify:
    enabled: false
  davinci:
    enabled: true
  pingcentral:
    enabled: true

baseline:
  initialize:
    enabled: true
  directory:
    enabled: true

# Enable these to include with the base CIAM configuration
useCases:
  # Add PingAccess deployment for protected Client traffic
  # Configures PF as the Token Provider
  accessControl:
    enabled: false
  # Adds OIDC CIBA to PingFed - requires PingOne MFA
  ciba:
    enabled: false
  # Configure PD Consent API and prep PF \ PA for Consent Management SPA
  consentManagement: 
    enabled: false
  # Configure PD Consent API and prep PF \ PA for Consent Enforcement SPA
  consentEnforcement: 
    enabled: false
  # Configure PD for DelAdmin (Config and Users) and install Delegator
  # Server Profile: https://github.com/cprice-ping/Profile-DelAdmin
  delegatedAdministration: 
    enabled: false
  # Adds SCIMv2 API to PD
  scim:
    enabled: false
  # Adds Facebook \ Google Adapters and adds them to the Registration LIP
  # They do need to be configured with **your** ClientID \ Secrets
  socialConnections:
    enabled: false
  # Adds Users to PD - enables DataSync
  userProfiles:
    enabled: false
  # Use the PingOne Verify Sample App
  verifyDemoEnv:
    enabled: false
#### End - Use Cases

# Set to `false` if using this chart with Server Profile
usePingConfig:
  enabled: true

## Product Specific values
# DevOps Keys and \ or License files can be applied to the container
# License files should be injected into your kubernetes namespace as secrets:
  # (Eval)   ping-devops generate license {product} | kubectl apply -f -
  # (Real)   ping-devops generate license-secret {license file} | kubectl apply -f -
ping-devops:
  pingdirectory:
    enabled: true
    envs: 
      SERVER_PROFILE_URL: https://github.com/cprice-ping/Project-Facile.git
      SERVER_PROFILE_PATH: pingdirectory
      SERVER_PROFILE_BRANCH: main
      TAIL_LOG_FILES: /opt/out/instance/logs/access /opt/out/instance/logs/errors /opt/out/instance/logs/failed-ops /opt/out/instance/logs/config-audit.log /opt/out/instance/logs/tools/dsjavaproperties.log /opt/out/instance/logs/tools/export-ldif.log /opt/out/instance/logs/tools/export-ldif.log.previous /opt/out/instance/logs/tools/install-ds.log /opt/out/instance/logs/tools/manage-profile.log /opt/out/instance/logs/tools/manage-profile.log.previous /opt/out/instance/logs/tools/status.log /opt/out/instance/logs/tools/tool-invocation.log /opt/out/instance/logs/tools/status.log /opt/out/instance/logs/tools/tool-invocation.log /opt/out/instance/logs/debug-trace
    logging: INFO
    container:
      replicaCount: 1
    # image:
    #   name: pingdirectory
    #   tag: 9.2.0.0-edge
    services:
      apis:
        dataService: true
        servicePort: 2443
        containerPort: 2443
  
  pingdataconsole:
    enabled: true
    # image:
    #   name: pingdataconsole
    #   tag: 9.2.0.0-edge

  pingfederate-admin:
    enabled: true
    envs:
      SERVER_PROFILE_URL: https://github.com/cprice-ping/Project-Facile.git
      SERVER_PROFILE_PATH: pingfederate
      SERVER_PROFILE_BRANCH: main
      PF_LOG_LEVEL: DEBUG
      JVM_OPTS: -Dlog4j2.formatMsgNoLookups=true
    logging: INFO
    workload:
      type: StatefulSet
    # image:
    #   tag: 11.2.0-edge

  pingfederate-engine:
    enabled: true
    envs:
      SERVER_PROFILE_URL: https://github.com/cprice-ping/Project-Facile.git
      SERVER_PROFILE_PATH: pingfederate
      SERVER_PROFILE_BRANCH: main
      PF_LOG_LEVEL: DEBUG
      JVM_OPTS: -Dlog4j2.formatMsgNoLookups=true
      TAIL_LOG_FILES: /opt/out/instance/log/server.log /opt/out/instance/log/audit.log
    logging: INFO
    # image:
    #   tag: 11.2.0-edge
    container:
      resources:
        requests:
          cpu: 0.60

  pingdatasync:
    enabled: true
    # image:
    #   name: pingdatasync
    #   tag: 9.2.0.0-edge

  pingaccess-admin:
    envs:
      SERVER_PROFILE_URL: https://github.com/cprice-ping/Project-Facile.git
      SERVER_PROFILE_PATH: pingaccess
      SERVER_PROFILE_BRANCH: main
      JVM_OPTS: -Dlog4j2.formatMsgNoLookups=true
    enabled: false
    privateCert:
      generate: true
    logging: INFO
    # image:
    #   tag: 7.2.0-edge
  
  pingaccess-engine:
    envs:
      SERVER_PROFILE_URL: https://github.com/cprice-ping/Project-Facile.git
      SERVER_PROFILE_PATH: pingaccess
      SERVER_PROFILE_BRANCH: main
      PA_LOG_LEVEL: DEBUG
      JVM_OPTS: -Dlog4j2.formatMsgNoLookups=true
    enabled: false
    logging: INFO
    # image:
    #   tag: 7.2.0-edge

  pingdelegator:
    enabled: false
    envs:
      SERVER_PROFILE_URL: https://github.com/cprice-ping/Project-Facile.git
      SERVER_PROFILE_PATH: pingdelegator
      SERVER_PROFILE_BRANCH: main
    # image:
    #   tag: 4.10.0-edge
       
  pingauthorize:
    enabled: false
    envs:
      SERVER_PROFILE_URL: https://github.com/cprice-ping/Project-Facile.git
      SERVER_PROFILE_PATH: pingauthorize
      SERVER_PROFILE_BRANCH: main
      TAIL_LOG_FILES: /opt/out/instance/logs/trace /opt/out/instance/logs/policy-decision /opt/out/instance/logs/ldap-access /opt/out/instance/logs/debug-trace
    # image:
    #   tag: 9.2.0.0-edge

  pingauthorizepap:
    enabled: false
    envs:
      SERVER_PROFILE_URL: https://github.com/cprice-ping/Project-Facile.git
      SERVER_PROFILE_PATH: pingauthorizepap
      SERVER_PROFILE_BRANCH: main
      TAIL_LOG_FILES: /opt/out/instance/logs/pingauthorize-pap.log /opt/out/instance/logs/setup.log /opt/out/instance/logs/start-server.log /opt/out/instance/logs/stop-server.log /opt/out/instance/logs/decision-audit.log
    # image:
    #   tag: 9.2.0.0-edge

  pingIntelligence:
    enabled: false
    # image:
    #   tag: 5.1.1-edge

  pingcentral:
    enabled: true
    envs:
      SERVER_PROFILE_URL: https://github.com/cprice-ping/Project-Facile.git
      SERVER_PROFILE_PATH: pingcentral
      SERVER_PROFILE_BRANCH: main
      PING_CENTRAL_LOG_LEVEL: DEBUG
      PINGCENTRAL_EXPRESSIONS_ENABLED: "true"
      PING_CENTRAL_BLIND_TRUST: "true"
    workload:
      type: StatefulSet
      statefulSet:
        persistentvolume:
          volumes:
            out-dir:
              mountPath: /opt/out
              persistentVolumeClaim:
                resources:
                  requests:
                    storage: 4Gi

collections:
  useCases:
    paAsProxy:
      name: "PA as Proxy"
      url: https://www.getpostman.com/collections/eaa397bd3a35ef3095c1
    ciba:
      name: "CIBA"
      # url: https://www.getpostman.com/collections/a2f18fed21e4a14d048a
      url: https://api.postman.com/collections/1239082-6b548244-e3e5-429f-8ad1-f43556c47bb5?access_key=PMAT-01GK304XHBD7CQ35KRFKQAVPWN
    consentManagement:
      name: "Consent Management"
      # url: https://www.getpostman.com/collections/4f27daff62383fd3f4ed
      url: https://api.postman.com/collections/1239082-0e249c8f-349b-4d24-bc24-9d4b36f02bd3?access_key=PMAT-01GK305H5ERBV94FQV177480XR
    consentEnforcement:
      name: "Consent Enforcement" 
      # url: https://www.getpostman.com/collections/a1808de03c1aff9d51a0
      url: https://api.postman.com/collections/1239082-940501f0-de76-4ce5-9251-010d58adc8ce?access_key=PMAT-01GK3063XA0EB63NE6D89D4VV1
    delegatedAdministration: 
      name: "Delegated Administration"
      # url: https://www.getpostman.com/collections/67c0839677fa2b0fad81
      url: https://api.postman.com/collections/1239082-75541c7c-fea7-4281-b955-6ecc6e7f65fb?access_key=PMAT-01GK306VQCZ7V4F3XNGGANWQT7
    accessControl:
      name: "Access Control (API \\ Web)"
      # url: https://www.getpostman.com/collections/30bd6d0e5f4a523c9448
      url: https://api.postman.com/collections/1239082-df2ed2a6-4078-41dd-8780-bde853081563?access_key=PMAT-01GK3D36AM0HF2SZ4X0BGVQYB6
    scim:
      name: "SCIM v2"
      url: https://www.getpostman.com/collections/8b746e4dc422b1a490a7
    socialConnections:
      name: "Social Connections"
      # url: https://www.getpostman.com/collections/69ea2f964dcb562299db
      url: https://api.postman.com/collections/1239082-cca83503-29fa-4d09-9741-de2533e0c67d?access_key=PMAT-01GK3088JX6TC7JVTNRPBS8P5J
    userProfiles: 
      name: "Unified User Profiles"
      # url: https://www.getpostman.com/collections/f398715be18b040e211d
      url: https://api.postman.com/collections/1239082-3433d3f6-9587-41f7-bd53-8f67d71aaad6?access_key=PMAT-01GK2Y7XTH46NZBB7JSVMQ7QJP
  capabilities:
    pingOne:
      name: "Unified Administration"
      # url: https://www.getpostman.com/collections/6f6d11a1b8536d740592
      url: https://api.postman.com/collections/1239082-9508e3b2-a612-472a-911e-54bf971c2cab?access_key=PMAT-01GK3C2C73QDBQTGY0TPCCA2YM
    authenticationAuthority:
      name: "Authentication Authority"
      # url: https://www.getpostman.com/collections/d44bd9bcbe599eec80a7
      url: https://api.postman.com/collections/1239082-38872902-4628-4a65-bebd-3b2fbab5b653?access_key=PMAT-01GK2ZVFTJ76S0J3778NJ6X7AT
    accessManager:
      name: "Access Manager"
      # url: https://www.getpostman.com/collections/934936decf928c0cc792
      url: https://api.postman.com/collections/1239082-319a568a-9597-4b54-8aa3-e8b6a03a7c6c?access_key=PMAT-01GK2ZWS5SM14JK5PNM337MV0G
    multiFactorAuthentication:
      name: "Multi Factor Service"
      # url: https://www.getpostman.com/collections/8c8a18c411a8222a2469
      url: https://api.postman.com/collections/1239082-8cbb5ce0-424a-4e43-adce-330ebd21551c?access_key=PMAT-01GK2ZYFENMM1867BB2SM6W47V
    risk:
      name: "Adaptive Authentication"
      # url: https://www.getpostman.com/collections/c858030284d959de50f7
      url: https://api.postman.com/collections/1239082-329d3441-6dd0-48b3-a755-a5566d37392c?access_key=PMAT-01GK2ZZJ734PMBCRK6CM9QT171
    verify:
      name: "Identity Verification"
      # url: https://www.getpostman.com/collections/f10b3fa241dd9394024a
      url: https://api.postman.com/collections/1239082-53bf960e-2f42-4c38-974a-948169c0ba0e?access_key=PMAT-01GK3015A2GS2NGC5Z4Y2FKM0A
    authorize:
      name: "Dynamic Authorization"
      # url: https://www.getpostman.com/collections/852ab959a953e607b22b
      url: https://api.postman.com/collections/1239082-dd903714-ea6a-4c33-bbd6-f122b7e43bd3?access_key=PMAT-01GK301XKQHAWHAG2HDMMXFESZ
    davinci:
      name: "PingOne DaVinci"
      # url: https://www.getpostman.com/collections/bf0193c1c66a6cff7101
      url: https://api.postman.com/collections/1239082-1f54d042-f690-4ac5-afc9-6fa8134dc41a?access_key=PMAT-01GK302GANFCGR9CAHBN3TTBMV
    pingcentral:
      name: "PingCentral"
      url: https://api.postman.com/collections/1239082-c1f34f6e-2131-444b-9ecf-227f2213f128?access_key=PMAT-01GMTSPS1VK42KS3QEHPHC8B0W
  baseline:
    directory:
      name: "Data Store"
      # url: https://www.getpostman.com/collections/f59e241da208cb731775
      url: https://api.postman.com/collections/1239082-38f773cf-726b-458f-84eb-06e3ab264cad?access_key=PMAT-01GK303AYAQAKGDP8YBAYBAVG9
    riskDashboard:
      name: "Risk Dashboard"
      # url: https://www.getpostman.com/collections/9426fc0b9dd0b43c9351
      url: https://api.postman.com/collections/1239082-999a566c-2a2b-47e0-abb0-93e3da13518c?access_key=PMAT-01GK3CVZX7VQZMY2PK2TM87B5J
